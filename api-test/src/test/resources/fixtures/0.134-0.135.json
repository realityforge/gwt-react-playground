[
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode>'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode>",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode>'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.cssPropertyTypes.Visibility>'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.cssPropertyTypes.Visibility>",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.cssPropertyTypes.Visibility>'.",
    "newElement": "class react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "oldElement": "enum react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.cssPropertyTypes.Visibility>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.AudioPreload>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.AudioPreload>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.AudioPreload>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.AudioPreload>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.ButtonType>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.ButtonType>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.ButtonType>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.ButtonType>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.FormMethod>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.FormMethod>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.FormMethod>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.FormMethod>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.HeaderScope>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.HeaderScope>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.HeaderScope>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.HeaderScope>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.InputType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.InputType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.InputType>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.InputType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.InputType>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.InputType>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.InputType",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.InputType>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.OnOff",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.OnOff",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.OnOff>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.OnOff",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.OnOff>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.OnOff>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.OnOff",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.OnOff>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.Target",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.Target",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.Target>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.Target",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.Target>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.Target>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.Target",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.Target>"
    }
  },
  {
    "code": "java.class.kindChanged",
    "description": "Class kind changed from 'enum' to 'class'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.YesNo",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enum",
      "newKind": "class",
      "oldKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.io.Serializable'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.YesNo",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enum",
      "interface": "java.io.Serializable",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerImplementsInterface",
    "description": "Class no longer implements interface 'java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.YesNo>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.YesNo",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enum",
      "interface": "java.lang.Comparable<react4j.dom.proptypes.html.attributeTypes.YesNo>",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.class.noLongerInheritsFromClass",
    "description": "Class no longer inherits from 'java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.YesNo>'.",
    "newElement": "class react4j.dom.proptypes.html.attributeTypes.YesNo",
    "oldElement": "enum react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enum",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "superClass": "java.lang.Enum<react4j.dom.proptypes.html.attributeTypes.YesNo>"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.backwards",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "field",
      "fieldName": "backwards",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'backwards'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.backwards",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "backwards",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "backwards"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.backwards",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "backwards",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.both",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "field",
      "fieldName": "both",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'both'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.both",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "both",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "both"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.both",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "both",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.forwards",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "field",
      "fieldName": "forwards",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'forwards'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.forwards",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "forwards",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "forwards"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.forwards",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "forwards",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.inherit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "field",
      "fieldName": "inherit",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'inherit'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.inherit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "inherit",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "inherit"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.inherit",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "inherit",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.initial",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "field",
      "fieldName": "initial",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'initial'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.initial",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "initial",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "initial"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.initial",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "initial",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.none",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "field",
      "fieldName": "none",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'none'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.none",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "none",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "none"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode.none",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "enumConstant",
      "fieldName": "none",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.collapse",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "field",
      "fieldName": "collapse",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'collapse'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.collapse",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "collapse",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "collapse"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.Visibility' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.collapse",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "collapse",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.hidden",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "field",
      "fieldName": "hidden",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'hidden'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.hidden",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "hidden",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "hidden"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.Visibility' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.hidden",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "hidden",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.inherit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "field",
      "fieldName": "inherit",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'inherit'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.inherit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "inherit",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "inherit"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.Visibility' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.inherit",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "inherit",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.initial",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "field",
      "fieldName": "initial",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'initial'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.initial",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "initial",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "initial"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.Visibility' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.initial",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "initial",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.visible",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "field",
      "fieldName": "visible",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'visible'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.visible",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "visible",
      "package": "react4j.dom.proptypes.cssPropertyTypes",
      "value": "visible"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.cssPropertyTypes.Visibility' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.cssPropertyTypes.Visibility.visible",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "enumConstant",
      "fieldName": "visible",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.auto",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "field",
      "fieldName": "auto",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'auto'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.auto",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enumConstant",
      "fieldName": "auto",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "auto"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.AudioPreload' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.auto",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enumConstant",
      "fieldName": "auto",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.metadata",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "field",
      "fieldName": "metadata",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'metadata'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.metadata",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enumConstant",
      "fieldName": "metadata",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "metadata"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.AudioPreload' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.metadata",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enumConstant",
      "fieldName": "metadata",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.none",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "field",
      "fieldName": "none",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'none'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.none",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enumConstant",
      "fieldName": "none",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "none"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.AudioPreload' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.AudioPreload.none",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "enumConstant",
      "fieldName": "none",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.button",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "field",
      "fieldName": "button",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'button'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.button",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enumConstant",
      "fieldName": "button",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "button"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.ButtonType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.button",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enumConstant",
      "fieldName": "button",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.reset",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "field",
      "fieldName": "reset",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'reset'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.reset",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enumConstant",
      "fieldName": "reset",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "reset"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.ButtonType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.reset",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enumConstant",
      "fieldName": "reset",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.submit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "field",
      "fieldName": "submit",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'submit'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.submit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enumConstant",
      "fieldName": "submit",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "submit"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.ButtonType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.ButtonType.submit",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "enumConstant",
      "fieldName": "submit",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.FormMethod.get",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "field",
      "fieldName": "get",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'get'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.FormMethod.get",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enumConstant",
      "fieldName": "get",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "get"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.FormMethod' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.FormMethod.get",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enumConstant",
      "fieldName": "get",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.FormMethod.post",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "field",
      "fieldName": "post",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'post'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.FormMethod.post",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enumConstant",
      "fieldName": "post",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "post"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.FormMethod' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.FormMethod.post",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "enumConstant",
      "fieldName": "post",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.col",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "field",
      "fieldName": "col",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'col'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.col",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "col",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "col"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.HeaderScope' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.col",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "col",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.colgroup",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "field",
      "fieldName": "colgroup",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'colgroup'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.colgroup",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "colgroup",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "colgroup"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.HeaderScope' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.colgroup",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "colgroup",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.row",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "field",
      "fieldName": "row",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'row'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.row",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "row",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "row"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.HeaderScope' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.row",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "row",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.rowgroup",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "field",
      "fieldName": "rowgroup",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'rowgroup'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.rowgroup",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "rowgroup",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "rowgroup"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.HeaderScope' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.HeaderScope.rowgroup",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "enumConstant",
      "fieldName": "rowgroup",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.button",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "button",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'button'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.button",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "button",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "button"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.button",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "button",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.checkbox",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "checkbox",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'checkbox'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.checkbox",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "checkbox",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "checkbox"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.checkbox",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "checkbox",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.color",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "color",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'color'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.color",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "color",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "color"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.color",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "color",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.date",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "date",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'date'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.date",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "date",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "date"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.date",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "date",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.datetime",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "datetime",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'datetime'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.datetime",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "datetime",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "datetime"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.datetime",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "datetime",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.email",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "email",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'email'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.email",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "email",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "email"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.email",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "email",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.file",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "file",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'file'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.file",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "file",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "file"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.file",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "file",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.hidden",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "hidden",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'hidden'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.hidden",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "hidden",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "hidden"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.hidden",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "hidden",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.image",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "image",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'image'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.image",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "image",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "image"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.image",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "image",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.month",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "month",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'month'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.month",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "month",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "month"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.month",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "month",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.number",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "number",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'number'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.number",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "number",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "number"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.number",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "number",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.password",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "password",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'password'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.password",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "password",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "password"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.password",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "password",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.radio",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "radio",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'radio'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.radio",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "radio",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "radio"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.radio",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "radio",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.range",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "range",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'range'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.range",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "range",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "range"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.range",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "range",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.reset",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "reset",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'reset'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.reset",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "reset",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "reset"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.reset",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "reset",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.search",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "search",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'search'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.search",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "search",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "search"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.search",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "search",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.submit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "submit",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'submit'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.submit",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "submit",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "submit"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.submit",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "submit",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.tel",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "tel",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'tel'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.tel",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "tel",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "tel"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.tel",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "tel",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.text",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "text",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'text'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.text",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "text",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "text"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.text",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "text",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.time",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "time",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'time'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.time",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "time",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "time"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.time",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "time",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.url",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "url",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'url'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.url",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "url",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "url"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.url",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "url",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.week",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "field",
      "fieldName": "week",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'week'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.week",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "week",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "week"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.InputType.week",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "enumConstant",
      "fieldName": "week",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.OnOff.off",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "field",
      "fieldName": "off",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'off'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.OnOff.off",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enumConstant",
      "fieldName": "off",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "off"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.OnOff' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.OnOff.off",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enumConstant",
      "fieldName": "off",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.OnOff.on",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "field",
      "fieldName": "on",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'on'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.OnOff.on",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enumConstant",
      "fieldName": "on",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "on"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.OnOff' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.OnOff.on",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "enumConstant",
      "fieldName": "on",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.blank",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "field",
      "fieldName": "blank",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value '_blank'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.blank",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "blank",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "_blank"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.Target' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.blank",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "blank",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.Target",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.parent",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "field",
      "fieldName": "parent",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value '_parent'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.parent",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "parent",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "_parent"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.Target' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.parent",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "parent",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.Target",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.self",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "field",
      "fieldName": "self",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value '_self'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.self",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "self",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "_self"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.Target' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.self",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "self",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.Target",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.top",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "field",
      "fieldName": "top",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value '_top'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.top",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "top",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "_top"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.Target' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.Target.top",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "enumConstant",
      "fieldName": "top",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.Target",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.YesNo.no",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "field",
      "fieldName": "no",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'no'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.YesNo.no",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enumConstant",
      "fieldName": "no",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "no"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.YesNo' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.YesNo.no",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enumConstant",
      "fieldName": "no",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.YesNo.yes",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "field",
      "fieldName": "yes",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.field.nowConstant",
    "description": "Field now declares a compile time constant value 'yes'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.YesNo.yes",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enumConstant",
      "fieldName": "yes",
      "package": "react4j.dom.proptypes.html.attributeTypes",
      "value": "yes"
    }
  },
  {
    "code": "java.field.typeChanged",
    "description": "The type of the field changed from 'react4j.dom.proptypes.html.attributeTypes.YesNo' to 'java.lang.String'.",
    "element": "field react4j.dom.proptypes.html.attributeTypes.YesNo.yes",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "enumConstant",
      "fieldName": "yes",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::accessKey(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "accessKey",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[]) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::className(java.lang.String[])",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "className",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contentEditable(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "contentEditable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::contextMenu(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "contextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dangerouslySetInnerHTML(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "dangerouslySetInnerHTML",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::dir(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "dir",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::draggable(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "draggable",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::hidden(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "hidden",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::id(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "id",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::key(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "key",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::lang(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "lang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::onWheel(react4j.dom.events.WheelEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "onWheel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::prop(java.lang.String, jsinterop.base.Any)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "prop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::ref(react4j.dom.proptypes.html.RefConsumer)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "ref",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::spellCheck(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "spellCheck",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::style(react4j.dom.proptypes.html.CssProps)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "style",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::tabIndex(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "tabIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::title(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "title",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.AnchorProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.AudioProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.BtnProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.ColProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.FormProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.HtmlProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.IFrameProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.ImgProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.InputProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.LabelProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.OptGroupProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.OptionProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.SelectProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.SourceProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.TdProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.TextAreaProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String) @ react4j.dom.proptypes.html.ThProps",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(java.lang.String)",
    "oldElement": "method T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(react4j.dom.proptypes.html.attributeTypes.YesNo)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "method",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::download(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "download",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::href(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "href",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::hrefLang(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "hrefLang",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::media(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "media",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::referrerPolicy(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "referrerPolicy",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::rel(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "rel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::target(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "target",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AnchorProps react4j.dom.proptypes.html.AnchorProps::type(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "method",
      "methodName": "type",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::autoPlay(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "autoPlay",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::controls(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "controls",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::loop(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "loop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::muted(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "muted",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::preLoad(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::preLoad(react4j.dom.proptypes.html.attributeTypes.AudioPreload)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "preLoad",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::src(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "method",
      "methodName": "src",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::autoFocus(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "autoFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::defaultChecked(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "defaultChecked",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::defaultValue(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "defaultValue",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::disabled(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "disabled",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::formAction(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "formAction",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::formEncType(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "formEncType",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::formMethod(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "formMethod",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::formNoValidate(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "formNoValidate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::formTarget(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "formTarget",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::from(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "from",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::name(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onSubmit(react4j.dom.events.FormEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onSubmit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::type(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::type(react4j.dom.proptypes.html.attributeTypes.ButtonType)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "type",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::value(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "method",
      "methodName": "value",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ColProps react4j.dom.proptypes.html.ColProps::span(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "method",
      "methodName": "span",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::alignContent(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "alignContent",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::alignItems(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "alignItems",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::alignSelf(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "alignSelf",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::alignmentAdjust(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "alignmentAdjust",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::alignmentBaseline(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "alignmentBaseline",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationDelay(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "animationDelay",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationDirection(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "animationDirection",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationFillMode(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationFillMode(react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "animationFillMode",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationIterationCount(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "animationIterationCount",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationName(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "animationName",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationPlayState(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "animationPlayState",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::appearance(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "appearance",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backfaceVisibility(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backfaceVisibility",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backgroundBlendMode(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backgroundBlendMode",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backgroundColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backgroundColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backgroundComposite(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backgroundComposite",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backgroundImage(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backgroundImage",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backgroundOrigin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backgroundOrigin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backgroundPositionX(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backgroundPositionX",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::backgroundRepeat(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "backgroundRepeat",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::border(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "border",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderBottomLeftRadius(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderBottomLeftRadius",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderBottomRightRadius(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderBottomRightRadius",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderBottomWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderBottomWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderCollapse(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderCollapse",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderCornerShape(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderCornerShape",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderImageSource(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderImageSource",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderImageWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderImageWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderLeft(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderLeft",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderLeftColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderLeftColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderLeftStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderLeftStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderLeftWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderLeftWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderRight(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderRight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderRightColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderRightColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderRightStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderRightStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderRightWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderRightWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderSpacing(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderSpacing",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderTop(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderTop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderTopColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderTopColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderTopLeftRadius(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderTopLeftRadius",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderTopRightRadius(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderTopRightRadius",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderTopStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderTopStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderTopWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderTopWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::borderWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "borderWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::bottom(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "bottom",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::boxDecorationBreak(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "boxDecorationBreak",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::boxFlex(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "boxFlex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::boxFlexGroup(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "boxFlexGroup",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::boxLineProgression(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "boxLineProgression",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::boxLines(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "boxLines",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::boxOrdinalGroup(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "boxOrdinalGroup",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::breakAfter(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "breakAfter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::breakBefore(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "breakBefore",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::breakInside(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "breakInside",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::clear(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "clear",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::clipRule(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "clipRule",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::color(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "color",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnCount(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnCount",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnFill(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnFill",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnGap(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnGap",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnRule(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnRule",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnRuleColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnRuleColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnRuleWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnRuleWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnSpan(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnSpan",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columnWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columnWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::columns(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "columns",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::counterIncrement(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "counterIncrement",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::counterReset(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "counterReset",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::cssFloat(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "cssFloat",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::cue(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "cue",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::cueAfter(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "cueAfter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::direction(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "direction",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::display(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "display",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fill(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fill",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fillOpacity(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fillOpacity",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fillRule(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fillRule",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::filter(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "filter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flex(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flexBasis(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flexBasis",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flexDirection(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flexDirection",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flexFlow(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flexFlow",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flexGrow(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flexGrow",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flexItemAlign(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flexItemAlign",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flexOrder(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flexOrder",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flexShrink(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flexShrink",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::flowFrom(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "flowFrom",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::font(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "font",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontFamily(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontFamily",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontKerning(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontKerning",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontSize(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontSize",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontSizeAdjust(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontSizeAdjust",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontStretch(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontStretch",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontSynthesis(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontSynthesis",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontVariant(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontVariant",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontVariantAlternates(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontVariantAlternates",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::fontWeight(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "fontWeight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridArea(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridArea",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridColumn(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridColumn",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridColumnEnd(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridColumnEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridColumnStart(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridColumnStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridRow(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridRow",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridRowEnd(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridRowEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridRowPosition(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridRowPosition",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridRowSpan(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridRowSpan",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridTemplateAreas(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridTemplateAreas",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridTemplateColumns(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridTemplateColumns",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::gridTemplateRows(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "gridTemplateRows",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::height(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "height",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::hyphenateLimitChars(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "hyphenateLimitChars",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::hyphenateLimitLines(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "hyphenateLimitLines",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::hyphenateLimitZone(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "hyphenateLimitZone",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::hyphens(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "hyphens",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::imeMode(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "imeMode",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::layoutGrid(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "layoutGrid",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::layoutGridChar(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "layoutGridChar",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::layoutGridLine(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "layoutGridLine",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::layoutGridMode(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "layoutGridMode",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::layoutGridType(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "layoutGridType",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::left(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "left",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::letterSpacing(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "letterSpacing",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::lineClamp(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "lineClamp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::lineHeight(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "lineHeight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::listStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "listStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::listStyleImage(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "listStyleImage",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::listStylePosition(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "listStylePosition",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::listStyleType(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "listStyleType",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::margin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "margin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::marginBottom(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "marginBottom",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::marginLeft(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "marginLeft",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::marginRight(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "marginRight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::marginTop(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "marginTop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::mask(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "mask",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maskBorder(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maskBorder",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maskBorderRepeat(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maskBorderRepeat",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maskBorderSlice(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maskBorderSlice",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maskBorderSource(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maskBorderSource",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maskBorderWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maskBorderWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maskClip(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maskClip",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maskOrigin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maskOrigin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maxFontSize(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maxFontSize",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maxHeight(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maxHeight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::maxWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "maxWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::minHeight(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "minHeight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::minWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "minWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::opacity(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "opacity",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::order(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "order",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::orphans(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "orphans",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::outline(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "outline",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::outlineColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "outlineColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::outlineOffset(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "outlineOffset",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::overflow(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "overflow",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::overflowStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "overflowStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::overflowX(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "overflowX",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::padding(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "padding",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::paddingBottom(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "paddingBottom",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::paddingLeft(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "paddingLeft",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::paddingRight(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "paddingRight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::paddingTop(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "paddingTop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::pageBreakAfter(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "pageBreakAfter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::pageBreakBefore(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "pageBreakBefore",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::pageBreakInside(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "pageBreakInside",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::pause(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "pause",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::pauseAfter(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "pauseAfter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::pauseBefore(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "pauseBefore",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::perspective(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "perspective",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::perspectiveOrigin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "perspectiveOrigin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::pointerEvents(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "pointerEvents",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::position(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "position",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::quotes(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "quotes",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::regionFragment(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "regionFragment",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::restAfter(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "restAfter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::restBefore(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "restBefore",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::right(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "right",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::rubyAlign(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "rubyAlign",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::rubyPosition(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "rubyPosition",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::shapeImageThreshold(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "shapeImageThreshold",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::shapeInside(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "shapeInside",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::shapeMargin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "shapeMargin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::shapeOutside(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "shapeOutside",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::speak(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "speak",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::speakAs(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "speakAs",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::strokeOpacity(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "strokeOpacity",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::strokeWidth(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "strokeWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::tabSize(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "tabSize",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::tableLayout(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "tableLayout",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textAlign(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textAlign",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textAlignLast(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textAlignLast",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecoration(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecoration",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationLine(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationLine",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationLineThrough(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationLineThrough",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationNone(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationNone",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationOverline(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationOverline",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationSkip(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationSkip",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textDecorationUnderline(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textDecorationUnderline",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textEmphasis(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textEmphasis",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textEmphasisColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textEmphasisColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textEmphasisStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textEmphasisStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textHeight(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textHeight",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textIndent(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textIndent",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textJustifyTrim(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textJustifyTrim",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textKashidaSpace(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textKashidaSpace",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textLineThroughWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textLineThroughWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textOverflow(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textOverflow",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textOverline(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textOverline",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textOverlineColor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textOverlineColor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textOverlineMode(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textOverlineMode",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textOverlineStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textOverlineStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textOverlineWidth(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textOverlineWidth",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textRendering(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textRendering",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textShadow(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textShadow",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::textTransform(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "textTransform",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::top(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "top",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::touchAction(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "touchAction",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transform(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transform",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transformOrigin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transformOrigin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transformOriginZ(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transformOriginZ",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transformStyle(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transformStyle",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transition(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transition",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transitionDelay(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transitionDelay",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transitionDuration(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transitionDuration",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transitionProperty(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transitionProperty",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::transitionTimingFunction(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "transitionTimingFunction",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::unicodeBidi(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "unicodeBidi",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::unicodeRange(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "unicodeRange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::userFocus(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "userFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::userInput(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "userInput",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::verticalAlign(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "verticalAlign",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::visibility(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::visibility(react4j.dom.proptypes.cssPropertyTypes.Visibility)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "visibility",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voiceBalance(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voiceBalance",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voiceDuration(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voiceDuration",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voiceFamily(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voiceFamily",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voicePitch(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voicePitch",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voiceRange(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voiceRange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voiceRate(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voiceRate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voiceStress(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voiceStress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::voiceVolume(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "voiceVolume",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::webkitMask(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "webkitMask",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::webkitMaskSize(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "webkitMaskSize",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::whiteSpace(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "whiteSpace",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::widows(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "widows",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::width(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "width",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::wordBreak(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "wordBreak",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::wordSpacing(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "wordSpacing",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::wordWrap(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "wordWrap",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::wrapFlow(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "wrapFlow",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::wrapMargin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "wrapMargin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::writingMode(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "writingMode",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::zIndex(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "zIndex",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::zoom(double)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "method",
      "methodName": "zoom",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::acceptCharset(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "acceptCharset",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::action(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "action",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::autoComplete(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::autoComplete(react4j.dom.proptypes.html.attributeTypes.OnOff)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "autoComplete",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formEncType(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "formEncType",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formMethod(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formMethod(react4j.dom.proptypes.html.attributeTypes.FormMethod)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "formMethod",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formNoValidate(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "formNoValidate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formTarget(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "formTarget",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::name(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onChange(react4j.dom.events.FormEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onChange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onInput(react4j.dom.events.FormEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onInput",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onSubmit(react4j.dom.events.FormEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onSubmit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onScroll(react4j.dom.events.UIEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onScroll",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.HtmlProps react4j.dom.proptypes.html.HtmlProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::height(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "height",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::name(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::sandbox(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "sandbox",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::src(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "src",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.IFrameProps react4j.dom.proptypes.html.IFrameProps::width(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "method",
      "methodName": "width",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::alt(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "alt",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::crossOrigin(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "crossOrigin",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::height(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "height",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onAbort(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onAbort",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onCanPlay(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onCanPlay",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onCanPlayThrough(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onCanPlayThrough",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onDurationChange(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onDurationChange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onEmptied(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onEmptied",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onEncrypted(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onEncrypted",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onEnded(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onEnded",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onError(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onError",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onLoad(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onLoad",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onLoadStart(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onLoadStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onLoadedData(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onLoadedData",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onLoadedMetadata(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onLoadedMetadata",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onPause(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onPause",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onPlay(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onPlay",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onPlaying(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onPlaying",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onProgress(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onProgress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onRateChange(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onRateChange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onSeeked(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onSeeked",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onSeeking(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onSeeking",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onStalled(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onStalled",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onSuspend(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onSuspend",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onTimeUpdate(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onTimeUpdate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onVolumeChange(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onVolumeChange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::onWaiting(react4j.dom.events.ReactEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "onWaiting",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::src(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "src",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::useMap(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "useMap",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ImgProps react4j.dom.proptypes.html.ImgProps::width(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "method",
      "methodName": "width",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::accept(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "accept",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::alt(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "alt",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::async(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "async",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::autoComplete(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::autoComplete(react4j.dom.proptypes.html.attributeTypes.OnOff)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "autoComplete",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::autoFocus(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "autoFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::checked(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "checked",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::defaultChecked(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "defaultChecked",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::defaultValue(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "defaultValue",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::disabled(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "disabled",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::form(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "form",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::formAction(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "formAction",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::formEncType(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "formEncType",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::formMethod(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "formMethod",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::formNoValidate(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "formNoValidate",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::formTarget(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "formTarget",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::height(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "height",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::list(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "list",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::max(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "max",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::maxLength(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "maxLength",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::min(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "min",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::multiple(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "multiple",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::name(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onChange(react4j.dom.events.FormEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onChange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::placeHolder(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "placeHolder",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::readonly(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "readonly",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::required(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "required",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::size(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "size",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::src(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "src",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::step(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "step",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::type(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::type(react4j.dom.proptypes.html.attributeTypes.InputType)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "type",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::value(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "value",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::width(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "method",
      "methodName": "width",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::form(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "form",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::htmlFor(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "htmlFor",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.LabelProps react4j.dom.proptypes.html.LabelProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.OptGroupProps react4j.dom.proptypes.html.OptGroupProps::disabled(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "disabled",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.OptGroupProps react4j.dom.proptypes.html.OptGroupProps::label(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "method",
      "methodName": "label",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.OptionProps react4j.dom.proptypes.html.OptionProps::disabled(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "disabled",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.OptionProps react4j.dom.proptypes.html.OptionProps::label(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "label",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.OptionProps react4j.dom.proptypes.html.OptionProps::selected(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "selected",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.OptionProps react4j.dom.proptypes.html.OptionProps::value(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "method",
      "methodName": "value",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::autoFocus(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "autoFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::defaultValue(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "defaultValue",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::disabled(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "disabled",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::form(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "form",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::multiple(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "multiple",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::name(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onChange(react4j.dom.events.FormEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onChange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onScroll(react4j.dom.events.UIEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onScroll",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::required(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "required",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::size(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "size",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SelectProps react4j.dom.proptypes.html.SelectProps::value(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "method",
      "methodName": "value",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SourceProps react4j.dom.proptypes.html.SourceProps::media(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "media",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SourceProps react4j.dom.proptypes.html.SourceProps::src(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "src",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.SourceProps react4j.dom.proptypes.html.SourceProps::type(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "method",
      "methodName": "type",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::colSpan(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "colSpan",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::headers(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "headers",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TdProps react4j.dom.proptypes.html.TdProps::rowSpan(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "method",
      "methodName": "rowSpan",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::autoComplete(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::autoComplete(react4j.dom.proptypes.html.attributeTypes.OnOff)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "autoComplete",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::autoFocus(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "autoFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::cols(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "cols",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::defaultValue(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "defaultValue",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::disabled(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "disabled",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::form(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "form",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::maxLength(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "maxLength",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::minLength(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "minLength",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::name(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onChange(react4j.dom.events.FormEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onChange",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onScroll(react4j.dom.events.UIEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onScroll",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::placeHolder(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "placeHolder",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::readonly(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "readonly",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::required(boolean)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "required",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::rows(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "rows",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::value(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "method",
      "methodName": "value",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::colSpan(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "colSpan",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::headers(java.lang.String)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "headers",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onBlur(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onBlur",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onContextMenu(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onContextMenu",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDoubleClick(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDoubleClick",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDrag(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDrag",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDragEnd(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDragEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDragEnter(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDragEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDragExit(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDragExit",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDragLeave(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDragLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDragOver(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDragOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDragStart(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDragStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onDrop(react4j.dom.events.DragEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onDrop",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onFocus(react4j.dom.events.FocusEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onFocus",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onKeyDown(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onKeyDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onKeyPress(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onKeyPress",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onKeyUp(react4j.dom.events.KeyboardEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onKeyUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onMouseDown(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onMouseDown",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onMouseEnter(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onMouseEnter",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onMouseLeave(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onMouseLeave",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onMouseMove(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onMouseMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onMouseOut(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onMouseOut",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onMouseOver(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onMouseOver",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onMouseUp(react4j.dom.events.MouseEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onMouseUp",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onTouchCancel(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onTouchCancel",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onTouchEnd(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onTouchEnd",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onTouchMove(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onTouchMove",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::onTouchStart(react4j.dom.events.TouchEventHandler)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "onTouchStart",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::rowSpan(int)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "rowSpan",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::scope(java.lang.String)",
    "oldElement": "method react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::scope(react4j.dom.proptypes.html.attributeTypes.HeaderScope)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "method",
      "methodName": "scope",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method <T extends java.lang.Enum<T extends java.lang.Enum<T>>> T java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::valueOf(java.lang.Class<T>, java.lang.String) @ react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::compareTo(E) @ react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "method",
      "methodName": "compareTo",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method int java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::ordinal() @ react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "method",
      "methodName": "ordinal",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.Class<E> java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::getDeclaringClass() @ react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "method",
      "methodName": "getDeclaringClass",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.cssPropertyTypes.Visibility",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.AudioPreload",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.ButtonType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.FormMethod",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.HeaderScope",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.InputType",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.OnOff",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.Target",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method java.lang.String java.lang.Enum<E extends java.lang.Enum<E extends java.lang.Enum<E>>>::name() @ react4j.dom.proptypes.html.attributeTypes.YesNo",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "method",
      "methodName": "name",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode[] react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "classSimpleName": "AnimationFillMode",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.cssPropertyTypes.Visibility react4j.dom.proptypes.cssPropertyTypes.Visibility::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.cssPropertyTypes.Visibility[] react4j.dom.proptypes.cssPropertyTypes.Visibility::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "classSimpleName": "Visibility",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.cssPropertyTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formTarget(react4j.dom.proptypes.html.attributeTypes.Target)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "method",
      "methodName": "formTarget",
      "package": "react4j.dom.proptypes.html"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.AudioPreload react4j.dom.proptypes.html.attributeTypes.AudioPreload::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.AudioPreload[] react4j.dom.proptypes.html.attributeTypes.AudioPreload::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "classSimpleName": "AudioPreload",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.ButtonType react4j.dom.proptypes.html.attributeTypes.ButtonType::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.ButtonType[] react4j.dom.proptypes.html.attributeTypes.ButtonType::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "classSimpleName": "ButtonType",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.FormMethod react4j.dom.proptypes.html.attributeTypes.FormMethod::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.FormMethod[] react4j.dom.proptypes.html.attributeTypes.FormMethod::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "classSimpleName": "FormMethod",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.HeaderScope react4j.dom.proptypes.html.attributeTypes.HeaderScope::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.HeaderScope[] react4j.dom.proptypes.html.attributeTypes.HeaderScope::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "classSimpleName": "HeaderScope",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.InputType react4j.dom.proptypes.html.attributeTypes.InputType::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.InputType[] react4j.dom.proptypes.html.attributeTypes.InputType::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "classSimpleName": "InputType",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.OnOff react4j.dom.proptypes.html.attributeTypes.OnOff::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.OnOff[] react4j.dom.proptypes.html.attributeTypes.OnOff::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "classSimpleName": "OnOff",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.Target react4j.dom.proptypes.html.attributeTypes.Target::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.Target[] react4j.dom.proptypes.html.attributeTypes.Target::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.Target",
      "classSimpleName": "Target",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.YesNo react4j.dom.proptypes.html.attributeTypes.YesNo::valueOf(java.lang.String)",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "method",
      "methodName": "valueOf",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.method.removed",
    "description": "Method was removed.",
    "oldElement": "method react4j.dom.proptypes.html.attributeTypes.YesNo[] react4j.dom.proptypes.html.attributeTypes.YesNo::values()",
    "classification": {
      "SOURCE": "BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "classSimpleName": "YesNo",
      "elementKind": "method",
      "methodName": "values",
      "package": "react4j.dom.proptypes.html.attributeTypes"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.AnchorProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.AudioProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.BtnProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.ColProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.FormProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.HtmlProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.IFrameProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.ImgProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.InputProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.LabelProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.OptGroupProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.OptionProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.SelectProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.SourceProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.TdProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.TextAreaProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===) @ react4j.dom.proptypes.html.ThProps",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===)",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "parameter",
      "methodName": "translate",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.YesNo' to 'java.lang.String'.",
    "newElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===java.lang.String===)",
    "oldElement": "parameter T react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::translate(===react4j.dom.proptypes.html.attributeTypes.YesNo===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "parameter",
      "methodName": "translate",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.YesNo",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::preLoad(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::preLoad(===react4j.dom.proptypes.html.attributeTypes.AudioPreload===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "parameter",
      "methodName": "preLoad",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.AudioPreload' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::preLoad(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.AudioProps react4j.dom.proptypes.html.AudioProps::preLoad(===react4j.dom.proptypes.html.attributeTypes.AudioPreload===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "parameter",
      "methodName": "preLoad",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.AudioPreload",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::type(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::type(===react4j.dom.proptypes.html.attributeTypes.ButtonType===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "parameter",
      "methodName": "type",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.ButtonType' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::type(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.BtnProps react4j.dom.proptypes.html.BtnProps::type(===react4j.dom.proptypes.html.attributeTypes.ButtonType===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "parameter",
      "methodName": "type",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.ButtonType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationFillMode(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationFillMode(===react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "parameter",
      "methodName": "animationFillMode",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationFillMode(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::animationFillMode(===react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "parameter",
      "methodName": "animationFillMode",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.AnimationFillMode",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::visibility(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::visibility(===react4j.dom.proptypes.cssPropertyTypes.Visibility===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "parameter",
      "methodName": "visibility",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.cssPropertyTypes.Visibility' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::visibility(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.CssProps react4j.dom.proptypes.html.CssProps::visibility(===react4j.dom.proptypes.cssPropertyTypes.Visibility===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.CssProps",
      "classSimpleName": "CssProps",
      "elementKind": "parameter",
      "methodName": "visibility",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.cssPropertyTypes.Visibility",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::autoComplete(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::autoComplete(===react4j.dom.proptypes.html.attributeTypes.OnOff===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "parameter",
      "methodName": "autoComplete",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.OnOff' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::autoComplete(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::autoComplete(===react4j.dom.proptypes.html.attributeTypes.OnOff===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "parameter",
      "methodName": "autoComplete",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formMethod(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formMethod(===react4j.dom.proptypes.html.attributeTypes.FormMethod===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "parameter",
      "methodName": "formMethod",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.FormMethod' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formMethod(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formMethod(===react4j.dom.proptypes.html.attributeTypes.FormMethod===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "parameter",
      "methodName": "formMethod",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.FormMethod",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter react4j.dom.proptypes.html.FormProps react4j.dom.proptypes.html.FormProps::formTarget(===java.lang.String===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "parameter",
      "methodName": "formTarget",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::autoComplete(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::autoComplete(===react4j.dom.proptypes.html.attributeTypes.OnOff===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "parameter",
      "methodName": "autoComplete",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.OnOff' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::autoComplete(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::autoComplete(===react4j.dom.proptypes.html.attributeTypes.OnOff===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "parameter",
      "methodName": "autoComplete",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::type(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::type(===react4j.dom.proptypes.html.attributeTypes.InputType===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "parameter",
      "methodName": "type",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.InputType' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::type(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.InputProps react4j.dom.proptypes.html.InputProps::type(===react4j.dom.proptypes.html.attributeTypes.InputType===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "parameter",
      "methodName": "type",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.InputType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::autoComplete(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::autoComplete(===react4j.dom.proptypes.html.attributeTypes.OnOff===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "parameter",
      "methodName": "autoComplete",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.OnOff' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::autoComplete(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.TextAreaProps react4j.dom.proptypes.html.TextAreaProps::autoComplete(===react4j.dom.proptypes.html.attributeTypes.OnOff===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "parameter",
      "methodName": "autoComplete",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.OnOff",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "newElement": "parameter react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::scope(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::scope(===react4j.dom.proptypes.html.attributeTypes.HeaderScope===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "parameter",
      "methodName": "scope",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.method.parameterTypeChanged",
    "description": "The type of the parameter changed from 'react4j.dom.proptypes.html.attributeTypes.HeaderScope' to 'java.lang.String'.",
    "newElement": "parameter react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::scope(===java.lang.String===)",
    "oldElement": "parameter react4j.dom.proptypes.html.ThProps react4j.dom.proptypes.html.ThProps::scope(===react4j.dom.proptypes.html.attributeTypes.HeaderScope===)",
    "classification": {
      "SOURCE": "POTENTIALLY_BREAKING",
      "BINARY": "BREAKING"
    },
    "attachments": {
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "parameter",
      "methodName": "scope",
      "newType": "java.lang.String",
      "oldType": "react4j.dom.proptypes.html.attributeTypes.HeaderScope",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.AnchorProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AnchorProps",
      "classSimpleName": "AnchorProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.AudioProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.AudioProps",
      "classSimpleName": "AudioProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.BtnProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.BtnProps",
      "classSimpleName": "BtnProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.ColProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ColProps",
      "classSimpleName": "ColProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.FormProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.FormProps",
      "classSimpleName": "FormProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.HtmlProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlProps",
      "classSimpleName": "HtmlProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.IFrameProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.IFrameProps",
      "classSimpleName": "IFrameProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.ImgProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ImgProps",
      "classSimpleName": "ImgProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.InputProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.InputProps",
      "classSimpleName": "InputProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.LabelProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.LabelProps",
      "classSimpleName": "LabelProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.OptGroupProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptGroupProps",
      "classSimpleName": "OptGroupProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.OptionProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.OptionProps",
      "classSimpleName": "OptionProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.SelectProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SelectProps",
      "classSimpleName": "SelectProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.SourceProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.SourceProps",
      "classSimpleName": "SourceProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.TdProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TdProps",
      "classSimpleName": "TdProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.TextAreaProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.TextAreaProps",
      "classSimpleName": "TextAreaProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===) @ react4j.dom.proptypes.html.ThProps",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.ThProps",
      "classSimpleName": "ThProps",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  },
  {
    "code": "java.annotation.added",
    "description": "Element newly annotated with 'javax.annotation.Nonnull'.",
    "element": "parameter void react4j.dom.proptypes.html.HtmlGlobalFields<T extends react4j.dom.proptypes.html.HtmlGlobalFields>::setType(===java.lang.String===)",
    "classification": {
      "SOURCE": "EQUIVALENT",
      "BINARY": "EQUIVALENT",
      "SEMANTIC": "POTENTIALLY_BREAKING"
    },
    "attachments": {
      "annotation": "@javax.annotation.Nonnull",
      "annotationType": "javax.annotation.Nonnull",
      "classQualifiedName": "react4j.dom.proptypes.html.HtmlGlobalFields",
      "classSimpleName": "HtmlGlobalFields",
      "elementKind": "parameter",
      "methodName": "setType",
      "package": "react4j.dom.proptypes.html",
      "parameterIndex": "0"
    }
  }
]
